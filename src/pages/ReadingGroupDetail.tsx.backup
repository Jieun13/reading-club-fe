import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
  UserGroupIcon, 
  ArrowLeftIcon, 
  ShareIcon, 
  CogIcon,
  UserPlusIcon,
  BookOpenIcon,
  CalendarIcon,
  ChatBubbleLeftRightIcon,
  ClockIcon,
  PlusIcon,
  TrashIcon,
  StarIcon
} from '@heroicons/react/24/outline';
import { StarIcon as StarIconSolid } from '@heroicons/react/24/solid';
import { readingGroupApi } from '../api/readingGroups';
import { wishlistApi } from '../api/wishlists';
import { ReadingGroup } from '../types/readingGroup';
import { useAuth } from '../contexts/AuthContext';
import Loading from '../components/common/Loading';

const ReadingGroupDetail: React.FC = () => {
  const { groupId } = useParams<{ groupId: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [group, setGroup] = useState<ReadingGroup | null>(null);
  const [loading, setLoading] = useState(true);
  const [showInviteCode, setShowInviteCode] = useState(false);

  useEffect(() => {
    const fetchGroupData = async () => {
      if (groupId) {
        try {
          setLoading(true);
          const response = await readingGroupApi.getGroup(Number(groupId));
          setGroup(response.data.data);
        } catch (error) {
          console.error('독서 모임을 불러오는데 실패했습니다:', error);
          alert('독서 모임을 찾을 수 없습니다.');
          navigate('/reading-groups');
        } finally {
          setLoading(false);
        }
      }
    };

    fetchGroupData();
  }, [groupId, navigate]);

  const handleCopyInviteCode = () => {
    if (group) {
      const inviteUrl = `${window.location.origin}/reading-groups/join/${group.inviteCode}`;
      navigator.clipboard.writeText(inviteUrl);
      alert('초대 링크가 복사되었습니다!');
    }
  };

  const handleAddToWishlist = async () => {
    if (!group || !group.bookTitle) {
      return;
    }

    try {
      // 중복 체크
      const duplicateCheck = await wishlistApi.checkDuplicate(
        group.bookTitle,
        group.bookAuthor || undefined
      );

      if (duplicateCheck.data.data.duplicate) {
        alert('이미 읽고 싶은 책에 추가된 책입니다.');
        return;
      }

      const wishlistData = {
        title: group.bookTitle,
        author: group.bookAuthor || '',
        publisher: group.bookPublisher || '',
        coverImage: group.bookCoverImage || '',
        memo: `${group.name} 모임의 이달의 책`
      };

      await wishlistApi.addWishlist(wishlistData);
      alert('읽고 싶은 책에 추가되었습니다!');
    } catch (error) {
      console.error('읽고 싶은 책 추가 실패:', error);
      alert('읽고 싶은 책 추가에 실패했습니다. 다시 시도해주세요.');
    }
  };

  const handleRegenerateInviteCode = async () => {
    if (!group || !window.confirm('초대 코드를 재생성하시겠습니까? 기존 링크는 사용할 수 없게 됩니다.')) {
      return;
    }

    try {
      const response = await readingGroupApi.regenerateInviteCode(group.id);
      setGroup(prev => prev ? { ...prev, inviteCode: response.data.data.inviteCode } : null);
      alert('초대 코드가 재생성되었습니다.');
    } catch (error) {
      console.error('초대 코드 재생성에 실패했습니다:', error);
      alert('초대 코드 재생성에 실패했습니다.');
    }
  };

  const handleLeaveGroup = async () => {
    if (!group || !window.confirm('정말로 이 모임에서 탈퇴하시겠습니까?')) {
      return;
    }

    try {
      await readingGroupApi.leaveGroup(group.id);
      alert('모임에서 탈퇴했습니다.');
      navigate('/reading-groups');
    } catch (error) {
      console.error('모임 탈퇴에 실패했습니다:', error);
      alert('모임 탈퇴에 실패했습니다.');
    }
  };

  if (loading) {
    return (
      <div className="container py-8">
        <div className="text-center">
          <Loading size="lg" text="독서 모임을 불러오는 중..." />
        </div>
      </div>
    );
  }

  if (!group) {
    return (
      <div className="container py-8">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900">모임을 찾을 수 없습니다</h2>
        </div>
      </div>
    );
  }

  const isCreator = user && group && group.creator.id === user.id;

  const handleDeleteGroup = async () => {
    if (!group || !window.confirm('정말로 이 모임을 삭제하시겠습니까? 삭제된 모임은 복구할 수 없습니다.')) {
      return;
    }

    try {
      await readingGroupApi.deleteGroup(group.id);
      alert('모임이 성공적으로 삭제되었습니다.');
      navigate('/reading-groups');
    } catch (error) {
      console.error('모임 삭제 실패:', error);
      alert('모임 삭제에 실패했습니다. 다시 시도해주세요.');
    }
  };

  const fetchReviews = async (groupId: number) => {
    try {
      const response = await groupReviewApi.getGroupReviews(groupId);
      setReviews(response.data.data || []);
    } catch (error) {
      console.error('리뷰 조회 실패:', error);
      setReviews([]);
    }
  };

  const handleSubmitReview = async () => {
    if (!group || !reviewForm.title.trim() || !reviewForm.content.trim()) {
      alert('제목과 내용을 입력해주세요.');
      return;
    }

    try {
      const reviewData: GroupReviewCreateRequest = {
        readingGroupId: group.id,
        rating: reviewForm.rating,
        title: reviewForm.title,
        content: reviewForm.content,
        favoriteQuote: reviewForm.favoriteQuote || undefined,
        recommendation: reviewForm.recommendation || undefined,
        isPublic: reviewForm.isPublic
      };

      await groupReviewApi.createReview(reviewData);
      alert('리뷰가 성공적으로 작성되었습니다.');
      setShowReviewForm(false);
      setReviewForm({
        rating: 5,
        title: '',
        content: '',
        favoriteQuote: '',
        recommendation: '',
        isPublic: true
      });
      fetchReviews(group.id); // 리뷰 목록 새로고침
    } catch (error) {
      console.error('리뷰 작성 실패:', error);
      alert('리뷰 작성에 실패했습니다. 다시 시도해주세요.');
    }
  };

  const renderStars = (rating: number, interactive: boolean = false, onRatingChange?: (rating: number) => void) => {
    return (
      <div className="flex items-center space-x-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <button
            key={star}
            type="button"
            onClick={() => interactive && onRatingChange && onRatingChange(star)}
            className={`${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'} transition-transform`}
            disabled={!interactive}
          >
            {star <= rating ? (
              <StarIconSolid className="w-5 h-5 text-yellow-400" />
            ) : (
              <StarIcon className="w-5 h-5 text-gray-300" />
            )}
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="container py-8">
      <div className="max-w-4xl mx-auto">
        {/* 헤더 */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center">
            <button
              onClick={() => navigate('/reading-groups')}
              className="mr-4 p-2 text-gray-600 hover:text-gray-900 rounded-md hover:bg-gray-100"
            >
              <ArrowLeftIcon className="w-5 h-5" />
            </button>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center">
              <UserGroupIcon className="w-8 h-8 text-primary-600 mr-3" />
              {group.name}
            </h1>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowInviteCode(!showInviteCode)}
              className="btn btn-outline flex items-center"
            >
              <ShareIcon className="w-4 h-4 mr-2" />
              초대하기
            </button>
          </div>
        </div>

        {/* 초대 코드 섹션 */}
        {showInviteCode && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <h3 className="text-lg font-medium text-blue-900 mb-3">모임 초대</h3>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-blue-800 mb-1">
                  초대 링크
                </label>
                <div className="flex">
                  <input
                    type="text"
                    value={`${window.location.origin}/reading-groups/join/${group.inviteCode}`}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-blue-300 rounded-l-md text-sm"
                  />
                  <button
                    onClick={handleCopyInviteCode}
                    className="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 text-sm"
                  >
                    복사
                  </button>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-blue-800 mb-1">
                  초대 코드
                </label>
                <div className="flex items-center space-x-2">
                  <code className="px-3 py-2 bg-white border border-blue-300 rounded text-lg font-mono">
                    {group.inviteCode}
                  </code>
                  {isCreator && (
                    <button
                      onClick={handleRegenerateInviteCode}
                      className="text-sm text-blue-600 hover:text-blue-800"
                    >
                      재생성
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* 메인 콘텐츠 */}
          <div className="lg:col-span-2 space-y-6">
            {/* 모임 정보 */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">모임 정보</h2>

              <div className="space-y-4">
                <div>
                  <dt className="text-sm font-medium text-gray-500">모임 설명</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {group.description || '설명이 없습니다.'}
                  </dd>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">멤버 수</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {group.currentMemberCount}/{group.maxMembers}명
                    </dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">공개 설정</dt>
                    <dd className="mt-1">
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              group.isPublic
                  ? 'text-green-600 bg-green-50 border border-green-200'
                  : 'text-gray-600 bg-gray-50 border border-gray-200'
          }`}>
            {group.isPublic ? '공개' : '비공개'}
          </span>
                    </dd>
                  </div>
                </div>

                {/* ✅ 과제 유무 추가 */}
                <div>
                  <dt className="text-sm font-medium text-gray-500">과제</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {group.hasAssignment ? '모임 전까지 책 읽고 리뷰 남기기' : '과제 없음'}
                  </dd>
                </div>
              </div>
            </div>


            {/* 이달의 책 */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <BookOpenIcon className="w-5 h-5 mr-2" />
                  이달의 책
                </h2>
              </div>

              {group.bookTitle ? (
                  <div className="flex items-start space-x-4 p-4 bg-gray-50 rounded-lg">
                    <div className="w-16 h-20 flex-shrink-0">
                      {group.bookCoverImage ? (
                          <img
                              src={group.bookCoverImage}
                              alt={group.bookTitle}
                              className="w-full h-full object-cover rounded"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none';
                                const fallback = e.currentTarget.parentElement?.querySelector('.fallback-image') as HTMLElement;
                                if (fallback) fallback.style.display = 'flex';
                              }}
                          />
                      ) : (
                          <div className="fallback-image w-full h-full bg-gray-200 rounded flex items-center justify-center">
                            <BookOpenIcon className="w-8 h-8 text-gray-400" />
                          </div>
                      )}
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 mb-1">{group.bookTitle}</h3>
                      <p className="text-gray-600 text-sm mb-2">{group.bookAuthor}</p>
                      <p className="text-xs text-gray-500 mb-3">{group.bookPublisher}</p>

                      <div className="flex items-center justify-end">
                        
                        {/* 읽고 싶은 책 추가 버튼 */}
                        <button
                          onClick={handleAddToWishlist}
                          className="flex items-center px-3 py-1.5 text-sm bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors"
                        >
                          <PlusIcon className="w-4 h-4 mr-1" />
                          읽고 싶은 책 추가
                        </button>
                      </div>
                    </div>
                  </div>
              ) : (
                  <p className="text-gray-500">아직 선정된 책이 없습니다.</p>
              )}
            </div>

            {/* 리뷰 섹션 */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <ChatBubbleLeftRightIcon className="w-5 h-5 mr-2" />
                  모임 리뷰
                </h2>
                <button
                  onClick={() => setShowReviewForm(!showReviewForm)}
                  className="btn btn-primary btn-sm flex items-center"
                >
                  <PlusIcon className="w-4 h-4 mr-1" />
                  리뷰 작성
                </button>
              </div>

                {/* 리뷰 작성 폼 */}
                {showReviewForm && (
                  <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          별점
                        </label>
                        {renderStars(reviewForm.rating, true, (rating) => 
                          setReviewForm(prev => ({ ...prev, rating }))
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          리뷰 제목 *
                        </label>
                        <input
                          type="text"
                          value={reviewForm.title}
                          onChange={(e) => setReviewForm(prev => ({ ...prev, title: e.target.value }))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          placeholder="리뷰 제목을 입력하세요"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          리뷰 내용 *
                        </label>
                        <textarea
                          value={reviewForm.content}
                          onChange={(e) => setReviewForm(prev => ({ ...prev, content: e.target.value }))}
                          rows={4}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          placeholder="책에 대한 생각을 자유롭게 작성해주세요"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          인상 깊은 구절
                        </label>
                        <textarea
                          value={reviewForm.favoriteQuote}
                          onChange={(e) => setReviewForm(prev => ({ ...prev, favoriteQuote: e.target.value }))}
                          rows={2}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          placeholder="기억에 남는 구절이 있다면 적어주세요"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          추천 여부
                        </label>
                        <textarea
                          value={reviewForm.recommendation}
                          onChange={(e) => setReviewForm(prev => ({ ...prev, recommendation: e.target.value }))}
                          rows={2}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          placeholder="다른 사람들에게 이 책을 추천하고 싶은지 이유와 함께 적어주세요"
                        />
                      </div>

                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="isPublic"
                          checked={reviewForm.isPublic}
                          onChange={(e) => setReviewForm(prev => ({ ...prev, isPublic: e.target.checked }))}
                          className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                        />
                        <label htmlFor="isPublic" className="ml-2 block text-sm text-gray-700">
                          다른 멤버들에게 공개
                        </label>
                      </div>

                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={() => setShowReviewForm(false)}
                          className="px-4 py-2 text-sm text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200"
                        >
                          취소
                        </button>
                        <button
                          onClick={handleSubmitReview}
                          className="px-4 py-2 text-sm text-white bg-primary-600 rounded-md hover:bg-primary-700"
                        >
                          리뷰 등록
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                {/* 리뷰 목록 */}
                <div className="space-y-4">
                  {reviews.length > 0 ? (
                    reviews.map((review) => (
                      <div key={review.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center space-x-3">
                            <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                              {review.user.profileImage ? (
                                <img
                                  src={review.user.profileImage}
                                  alt={review.user.nickname}
                                  className="w-8 h-8 rounded-full object-cover"
                                />
                              ) : (
                                <span className="text-sm font-medium text-gray-600">
                                  {review.user.nickname.charAt(0)}
                                </span>
                              )}
                            </div>
                            <div>
                              <p className="font-medium text-gray-900">{review.user.nickname}</p>
                              <div className="flex items-center space-x-2">
                                {renderStars(review.rating)}
                                <span className="text-sm text-gray-500">
                                  {new Date(review.createdAt).toLocaleDateString('ko-KR')}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <h4 className="font-semibold text-gray-900 mb-2">{review.title}</h4>
                        <p className="text-gray-700 mb-3">{review.content}</p>
                        
                        {review.favoriteQuote && (
                          <div className="bg-gray-50 border-l-4 border-primary-500 p-3 mb-3">
                            <p className="text-sm text-gray-600 italic">"{review.favoriteQuote}"</p>
                          </div>
                        )}
                        
                        {review.recommendation && (
                          <div className="bg-blue-50 p-3 rounded">
                            <p className="text-sm text-blue-800">
                              <strong>추천:</strong> {review.recommendation}
                            </p>
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <ChatBubbleLeftRightIcon className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                      <p>아직 작성된 리뷰가 없습니다.</p>
                      <p className="text-sm">첫 번째 리뷰를 작성해보세요!</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* 사이드바 */}
          <div className="space-y-6">
            {/* 모임장 정보 */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">모임장</h3>
              <div className="flex items-center">
                {group.creator.profileImage ? (
                  <img
                    src={group.creator.profileImage}
                    alt={group.creator.nickname}
                    className="w-10 h-10 rounded-full mr-3"
                  />
                ) : (
                  <div className="w-10 h-10 bg-gray-300 rounded-full mr-3 flex items-center justify-center">
                    <UserGroupIcon className="w-5 h-5 text-gray-600" />
                  </div>
                )}
                  <div className="font-medium text-gray-900">{group.creator.nickname}</div>
                </div>
              </div>

            {/* 모임 일정 */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <CalendarIcon className="w-5 h-5 mr-2" />
                모임 일정
              </h3>
              <div className="space-y-3 text-sm">
                <div className="flex items-center text-gray-600">
                  <ClockIcon className="w-4 h-4 mr-2 flex-shrink-0" />
                  <span>
                    {group.startDateTime ?
                      new Date(group.startDateTime).toLocaleDateString('ko-KR', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        weekday: 'short'
                      }) + ' ' + new Date(group.startDateTime).toLocaleTimeString('ko-KR', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })
                      : '일정 미정'
                    }
                  </span>
                </div>
                <div className="flex items-center text-gray-600">
                  <span className="w-4 h-4 mr-2 text-center flex-shrink-0">
                    {group.meetingType === "ONLINE" ? "🔗" : "📍"}
                  </span>
                  {group.meetingType === "ONLINE" ? (
                      <a
                          href={group.meetingUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="underline text-blue-600 break-all"
                      >
                        {group.meetingUrl}
                      </a>
                  ) : (
                      <span>{group.location}</span>
                  )}
                </div>
                <div className="flex items-center text-gray-600">
                  <span className="w-4 h-4 mr-2 text-center flex-shrink-0">⏱️</span>
                  <span>약 {group.durationHours}시간 예정</span>
                </div>
                <div className="pt-2">
                  <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${
                      group.hasAssignment
                          ? 'bg-blue-100 text-blue-800' 
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {group.hasAssignment ? '과제 있음' : '자유 참여'}
                  </span>
                </div>
              </div>
            </div>
            {/* 액션 버튼 */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">메뉴</h3>
              <div className="space-y-2">
                <Link
                    to={`/reading-groups/${group.id}/members`}
                    className="w-full btn btn-outline flex items-center justify-center"
                >
                  <UserPlusIcon className="w-4 h-4 mr-2" />
                  멤버 관리
                </Link>

                {isCreator ? (
                    <button
                        onClick={handleDeleteGroup}
                        className="w-full btn btn-outline text-red-600 border-red-300 hover:bg-red-50 flex items-center justify-center"
                    >
                      <TrashIcon className="w-4 h-4 mr-2" />
                      모임 삭제
                    </button>
                ) : (
                    <button
                        onClick={handleLeaveGroup}
                        className="w-full btn btn-outline text-red-600 border-red-300 hover:bg-red-50"
                    >
                      모임 탈퇴
                    </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReadingGroupDetail;
